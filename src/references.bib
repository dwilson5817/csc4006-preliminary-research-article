@misc{linux_git,
    title = {GitHub - torvalds/linux: Linux kernel source tree},
    url = {https://github.com/torvalds/linux},
    author = {Linus Torvalds},
    month = {Dec},
    year = {2022},
}

@misc{scat,
    title = "{Source Code Analysis Tools}",
    url = "{https://owasp.org/www-community/Source_Code_Analysis_Tools}",
    author = "{Dave Wichers}",
    month = {Dec},
    year = {2022},
}

@book{pro_git,
  author = {Scott Chacon and Ben Straub},
  year = {2014},
  title = "{Pro Git (Second Edition)}",
  publisher = {Apress}
}

@misc{vcs_usage,
    title="{StackOverflow Annual Developer Survey 2022}",
    url={https://survey.stackoverflow.co/2022/#section-version-control-version-control-systems},
    author="{StackOverflow}",
    year={2022},
    month={Jun}
}

@misc{msrconf,
    tital = {Mining Software Respositories},
    url = "http://www.msrconf.org/",
    author = "{International Conference on Mining Software Repositories}",
    month = {Aug},
    year = {2022},
}

@INPROCEEDINGS{road_ahead_for_msr,
  author={Hassan, Ahmed E.},
  booktitle={2008 Frontiers of Software Maintenance},
  title={The road ahead for Mining Software Repositories},
  year={2008},
  volume={},
  number={},
  pages={48-57},
  doi={10.1109/FOSM.2008.4659248}
}

@misc{closer,
    title={CLOSER},
    url={https://closer.eeecs.qub.ac.uk/},
    author={Jordan Garrity and David Cutting},
    year={Sep},
    month={2021}
}

@INPROCEEDINGS{boa,
    author={Dyer, Robert and Nguyen, Hoan Anh and Rajan, Hridesh and Nguyen, Tien N.},
    booktitle={2013 35th International Conference on Software Engineering (ICSE)},
    title={Boa: A language and infrastructure for analyzing ultra-large-scale software repositories},
    year={2013},
    volume={},
    number={},
    pages={422-431},
    doi={10.1109/ICSE.2013.6606588}
}

@INPROCEEDINGS{mjgit,
    author={Sasaki, Miwa and Matsumoto, Shinsuke and Kusumoto, Shinji},
    booktitle={2018 IEEE Workshop on Mining and Analyzing Interaction Histories (MAINT)},
    title={Integrating source code search into git client for effective retrieving of change history},
    year={2018},
    volume={},
    number={},
    pages={1-5},
    doi={10.1109/MAINT.2018.8323089}
}

@misc{li_2020,
    title={Vulnerabilities mapping based on OWASP-sans: A survey for Static Application Security Testing (SAST)},
    url={https://doi.org/10.48550/arXiv.2004.03216},
    journal={arXiv.org},
    author={Li, Jinfeng},
    year={2020},
    month={Jul}
}

@INPROCEEDINGS{libvcs4j,
    author={Steinbeck, Marcel},
    booktitle={2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
    title={Mining Version Control Systems and Issue Trackers with LibVCS4j},
    year={2020},
    volume={},
    number={},
    pages={647-651},
    doi={10.1109/SANER48275.2020.9054841}
}

@INPROCEEDINGS{cvsgrab,
    author={Sasaki, Miwa and Matsumoto, Shinsuke and Kusumoto, Shinji},
    booktitle={2018 IEEE Workshop on Mining and Analyzing Interaction Histories (MAINT)},
    title={Integrating source code search into git client for effective retrieving of change history},
    year={2018},
    volume={},
    number={},
    pages={1-5},
    doi={10.1109/MAINT.2018.8323089}
}

@INPROCEEDINGS{sonarqube,
    author={Nikolić, Danilo and Stefanović, Darko and Dakić, Dušanka and Sladojević, Srđan and Ristić, Sonja},
    booktitle={2021 20th International Symposium INFOTEH-JAHORINA (INFOTEH)},
    title={Analysis of the Tools for Static Code Analysis},
    year={2021},
    volume={},
    number={},
    pages={1-6},
    doi={10.1109/INFOTEH51037.2021.9400688}
}

@INPROCEEDINGS{java_ci_sca,

  author={Zampetti, Fiorella and Scalabrino, Simone and Oliveto, Rocco and Canfora, Gerardo and Di Penta, Massimiliano},

  booktitle={2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR)},

  title={How Open Source Projects Use Static Code Analysis Tools in Continuous Integration Pipelines},

  year={2017},

  volume={},

  number={},

  pages={334-344},

  doi={10.1109/MSR.2017.2}}


@article{torcpy,
    title = {torcpy: Supporting task parallelism in Python},
    journal = {SoftwareX},
    volume = {12},
    pages = {100517},
    year = {2020},
    issn = {2352-7110},
    doi = {https://doi.org/10.1016/j.softx.2020.100517},
    url = {https://www.sciencedirect.com/science/article/pii/S2352711020300091},
    author = {P.E. Hadjidoukas and A. Bartezzaghi and F. Scheidegger and R. Istrate and C. Bekas and A.C.I. Malossi},
    keywords = {Parallelism, Python, MPI, Multithreading},
    abstract = {Task-based parallelism has been established as one of the main forms of code parallelization, where asynchronous tasks are launched and distributed across the processing units of a local machine, a cluster or a supercomputer. The tasks can be either completely decoupled, corresponding to a set of independent jobs, or be part of an iterative algorithm where the task results are processed and drive the next step. Typical use cases include the application of the same function to different data, parametric searches and algorithms used in numerical optimization and Bayesian uncertainty quantification. In this work, we introduce torcpy, a platform-agnostic adaptive load balancing library that orchestrates the asynchronous execution of tasks, expressed as callables with arguments, on both shared and distributed memory platforms. The library is implemented on top of MPI and multithreading and provides lightweight support for nested loops and map functions. Experimental results using representative applications demonstrate the flexibility and efficiency of the proposed Python package.}
}

@misc{perlmutter,
    title = "{Perlmutter - HPE Cray EX235n, AMD EPYC 7763 64C 2.45GHz, NVIDIA A100 SXM4 40 GB, Slingshot-10}",
    url = {https://www.top500.org/system/179972/},
    author = "{TOP500}",
    month = {Nov},
    year = {2022},
}

@misc{sonarqube_parallel,
    title = "{Sonar doesn't support parallel runs/analysis on the same project}",
    url = {https://sonarsource.atlassian.net/browse/SONAR-2761},
    author = {SonarQube JIRA},
    month = {Sep},
    year = {2011},
}

@misc{container_benefits,
    title = "{The Benefits of Containerization and What It Means for You}",
    url = {https://www.ibm.com/cloud/blog/the-benefits-of-containerization-and-what-it-means-for-you},
    author = {Rajeev Gandhi and Peter Szmrecsanyi},
    month = {Feb},
    year = {2019},
}

@article{repofs,
    title = {RepoFS: File system view of Git repositories},
    journal = {SoftwareX},
    volume = {9},
    pages = {288-292},
    year = {2019},
    issn = {2352-7110},
    doi = {https://doi.org/10.1016/j.softx.2019.03.007},
    url = {https://www.sciencedirect.com/science/article/pii/S2352711018300712},
    author = {Vitalis Salis and Diomidis Spinellis},
    keywords = {Git, Virtual file system, Mining software repositories, Unix shell},
    abstract = {Empirical software engineering work often involves studying revision control system repositories maintained using the popular Git system. Checking out each revision one wants to study is inefficient. On the other hand the examination of directories and files of past revisions using Git’s commands suffers from a usability perspective. We introduce repofs, a tool that exposes a Git repository as a virtual user-level file system. Commits, branches, and tags appear as separate directory trees allowing them to be efficiently processed through command-line tools and file explorers. We illustrate these points through motivating examples and discuss the advantages and drawbacks of the proposed approach.}
}

@InProceedings{docker_hpc,
    author="Higgins, Joshua
and Holmes, Violeta
and Venters, Colin",
    editor="Kunkel, Julian M.
and Ludwig, Thomas",
    title="Orchestrating Docker Containers in the HPC Environment",
    booktitle="High Performance Computing",
    year="2015",
    publisher="Springer International Publishing",
    address="Cham",
    pages="506--513",
    abstract="Linux container technology has more than proved itself useful in cloud computing as a lightweight alternative to virtualisation, whilst still offering good enough resource isolation. Docker is emerging as a popular runtime for managing Linux containers, providing both management tools and a simple file format. Research into the performance of containers compared to traditional Virtual Machines and bare metal shows that containers can achieve near native speeds in processing, memory and network throughput. A technology born in the cloud, it is making inroads into scientific computing both as a format for sharing experimental applications and as a paradigm for cloud based execution. However, it has unexplored uses in traditional cluster and grid computing. It provides a run time environment in which there is an opportunity for typical cluster and parallel applications to execute at native speeds, whilst being bundled with their own specific (or legacy) library versions and support software. This offers a solution to the Achilles heel of cluster and grid computing that requires the user to hold intimate knowledge of the local software infrastructure. Using Docker brings us a step closer to more effective job and resource management within the cluster by providing both a common definition format and a repeatable execution environment. In this paper we present the results of our work in deploying Docker containers in the cluster environment and an evaluation of its suitability as a runtime for high performance parallel execution. Our findings suggest that containers can be used to tailor the run time environment for an MPI application without compromising performance, and would provide better Quality of Service for users of scientific computing.",
    isbn="978-3-319-20119-1"
}

@misc{gitlab,
    title="{GitSlice - GitLab Repository}",
    url={https://gitlab.eeecs.qub.ac.uk/40234266/csc4006-project},
    author="Dylan Wilson",
    year={2022},
    month={Dec}
}